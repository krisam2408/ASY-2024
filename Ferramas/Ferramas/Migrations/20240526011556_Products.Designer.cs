// <auto-generated />
using System;
using Ferramas.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ferramas.Migrations
{
    [DbContext(typeof(FerraContext))]
    [Migration("20240526011556_Products")]
    partial class Products
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchasePending")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comestibles / Cocina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DecoHogar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pasatiempos"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tecnología"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Construcción"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Moda"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.FerraUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bfa761f-14ad-408a-b404-9ba7d492605f"),
                            Email = "testerina@gmail.com",
                            Name = "Testerina",
                            PasswordHash = "admin",
                            Surname = "Tester"
                        },
                        new
                        {
                            Id = new Guid("588ea360-eaec-4e08-97da-2d9bc17cebad"),
                            Email = "acasas@gmail.com",
                            Name = "Armando",
                            PasswordHash = "admin",
                            Surname = "Casas"
                        },
                        new
                        {
                            Id = new Guid("243bb0d2-1c86-4df1-98c7-d1cf925db0c3"),
                            Email = "pe.palo@gmail.com",
                            Name = "Pedro",
                            PasswordHash = "admin",
                            Surname = "Palote"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("445a8581-bcb3-4cdb-82b3-3292fd664ab8"),
                            CategoryId = 1,
                            Description = "Para hacerte el hipster y decir que cocinas todo con agua.",
                            Image = "aceite.jpg",
                            Name = "Aceite en Polvo",
                            Price = 6500f
                        },
                        new
                        {
                            Id = new Guid("469c44ee-900d-4cd5-8ddb-8419bf66e999"),
                            CategoryId = 1,
                            Description = "Para evitar la sal",
                            Name = "Sal sin sodio",
                            Price = 1200f
                        },
                        new
                        {
                            Id = new Guid("a1183b3b-73ee-4a89-a35b-dcffcab9ff9d"),
                            CategoryId = 1,
                            Description = "Nose porque diablos alguien compraria esto",
                            Name = "NOT MAYO",
                            Price = 3500f
                        },
                        new
                        {
                            Id = new Guid("fe4d41ae-a0b1-4f8a-ad4a-33bf6c698a74"),
                            CategoryId = 2,
                            Description = "Para demostrarle a Dios que eres impuro pero cuidas de tu salud.",
                            Name = "Látigo con Puntas de Cobre",
                            Price = 13250f
                        },
                        new
                        {
                            Id = new Guid("a6cadb5f-e6e3-4bc0-8b4b-99e57d035301"),
                            CategoryId = 2,
                            Description = "Para hacer el pan de los dioses",
                            Name = "Tostador chileno",
                            Price = 5000f
                        },
                        new
                        {
                            Id = new Guid("ef049cf7-e0ac-4e9f-a98f-f87c8bcba73b"),
                            CategoryId = 2,
                            Description = "La ventana ideal",
                            Name = "Ventana de hielo 7",
                            Price = 1000f
                        },
                        new
                        {
                            Id = new Guid("91214ed9-978a-4632-98b4-c45352767705"),
                            CategoryId = 3,
                            Description = "Para disfrazarte de alguien que se cree impuro.",
                            Name = "Látigo con Puntas Sin Filo",
                            Price = 10250f
                        },
                        new
                        {
                            Id = new Guid("03032799-7e89-4e75-8132-8e43290a78ee"),
                            CategoryId = 3,
                            Description = "Creeme es una buena compra",
                            Name = "Diccionario para entender a las mujeres",
                            Price = 7500f
                        },
                        new
                        {
                            Id = new Guid("aac94e45-bdc6-42f7-b50e-3f468a0b86be"),
                            CategoryId = 3,
                            Description = "La pelota de quico finalmente ha llgeaod al mercado",
                            Name = "Pelota cuadrada",
                            Price = 2000f
                        },
                        new
                        {
                            Id = new Guid("eb741d84-a5a1-4097-99a2-3e2783dd23a6"),
                            CategoryId = 4,
                            Description = "Para escuchar ese zumbido que molesta a tus vecinos y ver los canales que no te gustan.",
                            Name = "Multiantena de Fierro",
                            Price = 6350f
                        },
                        new
                        {
                            Id = new Guid("f324033d-6d9f-4eaf-b2af-728733f14c75"),
                            CategoryId = 4,
                            Description = "Finge estatus pero con algo de cerebro",
                            Name = "Iphone con bateria incluida",
                            Price = 1000000f
                        },
                        new
                        {
                            Id = new Guid("837e8b95-bcf4-4b88-b38b-665d2fc4aac1"),
                            CategoryId = 4,
                            Description = "Un televisor invisible,no hay mas descripcion",
                            Name = "Television invisible",
                            Price = 256000f
                        },
                        new
                        {
                            Id = new Guid("031cd7bc-8529-45ac-8def-e9592bb60a90"),
                            CategoryId = 5,
                            Description = "Para mostrar la fuerza que no tienes.",
                            Name = "Martillo Doble Golpe",
                            Price = 7360f
                        },
                        new
                        {
                            Id = new Guid("faf2e6e9-b2b5-4032-b88e-834c4e96c58b"),
                            CategoryId = 5,
                            Description = "Ideal para construir aeroplanos",
                            Name = "Cable inalambrico",
                            Price = 6000f
                        },
                        new
                        {
                            Id = new Guid("8a33c4f5-0f4d-4458-82f7-12616bc8ddf7"),
                            CategoryId = 5,
                            Description = "En el pais no existe",
                            Name = "Cadena perpetua",
                            Price = 9000f
                        },
                        new
                        {
                            Id = new Guid("202a427d-e9ac-4f52-8d10-6ef7e50b2d84"),
                            CategoryId = 6,
                            Description = "Magnificado a escala con lujo de detalles. Para estudiar lo que no puedes ver.",
                            Name = "Miembro a Escala",
                            Price = 7360f
                        },
                        new
                        {
                            Id = new Guid("62a6aa90-e1f6-439a-b5a1-129220ecb2a2"),
                            CategoryId = 6,
                            Description = "Regalalo",
                            Name = "Cosplay de enfermera",
                            Price = 4990f
                        },
                        new
                        {
                            Id = new Guid("baed9fe6-e4fb-4c00-8db4-0946ba563b02"),
                            CategoryId = 6,
                            Description = "Ropa de mal gusto",
                            Name = "Ropa de mal gusto",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.Property<string>("TransbankSession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.FerraUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
