// <auto-generated />
using System;
using Ferramas.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ferramas.Migrations
{
    [DbContext(typeof(FerraContext))]
    [Migration("20240525040943_ImageProduct")]
    partial class ImageProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchasePending")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comestibles / Cocina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DecoHogar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pasatiempos"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tecnología"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Construcción"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Moda"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.FerraUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b889e61-b79b-4aa8-9ca0-e5424a9d0156"),
                            Email = "testerina@gmail.com",
                            Name = "Testerina",
                            PasswordHash = "admin",
                            Surname = "Tester"
                        },
                        new
                        {
                            Id = new Guid("7adb8f3a-4ab4-46e4-bd53-8029ba83a984"),
                            Email = "acasas@gmail.com",
                            Name = "Armando",
                            PasswordHash = "admin",
                            Surname = "Casas"
                        },
                        new
                        {
                            Id = new Guid("408d7435-f350-4e83-9add-3219c67b2127"),
                            Email = "pe.palo@gmail.com",
                            Name = "Pedro",
                            PasswordHash = "admin",
                            Surname = "Palote"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c83c2e0-d9f3-4d5f-8305-a377a5a2a800"),
                            CategoryId = 1,
                            Description = "Para hacerte el hipster y decir que cocinas todo con agua.",
                            Image = "aceite.jpg",
                            Name = "Aceite en Polvo",
                            Price = 6500f
                        },
                        new
                        {
                            Id = new Guid("0a765b9f-6190-4d96-b0bd-c5fe81530788"),
                            CategoryId = 1,
                            Description = "Para decir que cocinas todo con agua.",
                            Name = "Aceite en Polvo",
                            Price = 4670f
                        },
                        new
                        {
                            Id = new Guid("870c1d2f-a711-4eba-b88e-7468f16229d5"),
                            CategoryId = 2,
                            Description = "Para demostrarle a Dios que eres impuro pero cuidas de tu salud.",
                            Name = "Látigo con Puntas de Cobre",
                            Price = 13250f
                        },
                        new
                        {
                            Id = new Guid("26f2ff42-ee0a-422d-8986-914ce64f28ee"),
                            CategoryId = 2,
                            Description = "Sancho Panza Metálico.",
                            Name = "Figura de Fierro de Don Quijote",
                            Price = 23250f
                        },
                        new
                        {
                            Id = new Guid("4c83d1d2-07a6-4855-a1a2-ee34d86f912b"),
                            CategoryId = 3,
                            Description = "Para disfrazarte de alguien que se cree impuro.",
                            Name = "Látigo con Puntas Sin Filo",
                            Price = 10250f
                        },
                        new
                        {
                            Id = new Guid("a95a4b39-5465-47f9-93f3-ca80c40ab030"),
                            CategoryId = 4,
                            Description = "Para escuchar ese zumbido que molesta a tus vecinos y ver los canales que no te gustan.",
                            Name = "Multiantena de Fierro",
                            Price = 6350f
                        },
                        new
                        {
                            Id = new Guid("47978fb0-cbb8-4d55-88c8-ac26298080af"),
                            CategoryId = 5,
                            Description = "Para mostrar la fuerza que no tienes.",
                            Name = "Martillo Doble Golpe",
                            Price = 7360f
                        },
                        new
                        {
                            Id = new Guid("7a5813c2-26b1-4566-bbc8-6b2e7d78777c"),
                            CategoryId = 6,
                            Description = "Magnificado a escala con lujo de detalles. Para estudiar lo que no puedes ver.",
                            Name = "Miembro a Escala",
                            Price = 7360f
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.Property<string>("TransbankSession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.FerraUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
