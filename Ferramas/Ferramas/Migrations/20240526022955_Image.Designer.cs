// <auto-generated />
using System;
using Ferramas.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ferramas.Migrations
{
    [DbContext(typeof(FerraContext))]
    [Migration("20240526022955_Image")]
    partial class Image
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchasePending")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comestibles / Cocina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DecoHogar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pasatiempos"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tecnología"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Construcción"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Moda"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.FerraUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("093ff76f-0c1f-4c4d-a822-f6abd50b8f17"),
                            Email = "testerina@gmail.com",
                            Name = "Testerina",
                            PasswordHash = "admin",
                            Surname = "Tester"
                        },
                        new
                        {
                            Id = new Guid("10999660-2573-4337-b23c-62a96d001818"),
                            Email = "acasas@gmail.com",
                            Name = "Armando",
                            PasswordHash = "admin",
                            Surname = "Casas"
                        },
                        new
                        {
                            Id = new Guid("2dda50a6-147f-443b-8c00-d35dc385ca8e"),
                            Email = "pe.palo@gmail.com",
                            Name = "Pedro",
                            PasswordHash = "admin",
                            Surname = "Palote"
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("525ed98e-e899-4453-9b7d-577117439782"),
                            CategoryId = 1,
                            Description = "Para hacerte el hipster y decir que cocinas todo con agua.",
                            Image = "aceite.jpg",
                            Name = "Aceite en Polvo",
                            Price = 6500f
                        },
                        new
                        {
                            Id = new Guid("ab9697c1-8a7c-4c4b-baa6-5e425b9f2ada"),
                            CategoryId = 1,
                            Description = "Para evitar la sal",
                            Image = "sal.webp",
                            Name = "Sal sin sodio",
                            Price = 1200f
                        },
                        new
                        {
                            Id = new Guid("d9e7a88a-7a01-4849-839b-21e9985034d6"),
                            CategoryId = 1,
                            Description = "Nose porque diablos alguien compraria esto",
                            Image = "mayo.jpg",
                            Name = "NOT MAYO",
                            Price = 3500f
                        },
                        new
                        {
                            Id = new Guid("08c88d7e-cc84-4576-aa9c-9ca6d67e42d3"),
                            CategoryId = 2,
                            Description = "Para demostrarle a Dios que eres impuro pero cuidas de tu salud.",
                            Image = "cuerda1.webp",
                            Name = "Látigo con Puntas de Cobre",
                            Price = 13250f
                        },
                        new
                        {
                            Id = new Guid("3752fecc-6b73-49ab-ad82-7eb05993ef4f"),
                            CategoryId = 2,
                            Description = "Para hacer el pan de los dioses",
                            Image = "Tostador.jpg",
                            Name = "Tostador chileno",
                            Price = 5000f
                        },
                        new
                        {
                            Id = new Guid("89d06704-9615-4a54-8bfe-2b257fbd84ed"),
                            CategoryId = 2,
                            Description = "La ventana ideal",
                            Image = "Hielo7.gif",
                            Name = "Ventana de hielo 7",
                            Price = 1000f
                        },
                        new
                        {
                            Id = new Guid("0e7d6608-11eb-4cc2-a152-7b891c35dbad"),
                            CategoryId = 3,
                            Description = "Para disfrazarte de alguien que se cree impuro.",
                            Image = "cuerda2.jpg",
                            Name = "Látigo con Puntas Sin Filo",
                            Price = 10250f
                        },
                        new
                        {
                            Id = new Guid("3dc60a68-297b-4ae9-9248-636fbf03b09d"),
                            CategoryId = 3,
                            Description = "Creeme es una buena compra",
                            Image = "Diccionario.jpg",
                            Name = "Diccionario para entender a las mujeres",
                            Price = 7500f
                        },
                        new
                        {
                            Id = new Guid("b1f4ceba-f7db-40d9-bd84-63cf70a59419"),
                            CategoryId = 3,
                            Description = "La pelota de quico finalmente ha llegado al mercado",
                            Image = "Pelota.jpg",
                            Name = "Pelota cuadrada",
                            Price = 2000f
                        },
                        new
                        {
                            Id = new Guid("52bf07fa-2652-4242-bd10-da6f0983806a"),
                            CategoryId = 4,
                            Description = "Para escuchar ese zumbido que molesta a tus vecinos y ver los canales que no te gustan.",
                            Image = "Antena.jpg",
                            Name = "Multiantena de Fierro",
                            Price = 6350f
                        },
                        new
                        {
                            Id = new Guid("dc0d497c-3955-471f-a720-ff448f712d5a"),
                            CategoryId = 4,
                            Description = "Finge estatus pero con algo de cerebro",
                            Image = "Iphone.webp",
                            Name = "Iphone con bateria incluida",
                            Price = 1000000f
                        },
                        new
                        {
                            Id = new Guid("157e1c6d-28eb-4443-8952-494efc1c7de6"),
                            CategoryId = 4,
                            Description = "Un televisor invisible,no hay mas descripcion",
                            Image = "nada.jpg",
                            Name = "Television invisible",
                            Price = 256000f
                        },
                        new
                        {
                            Id = new Guid("56ff595b-0696-45da-ac12-ed2542e4b9b9"),
                            CategoryId = 5,
                            Description = "Para mostrar la fuerza que no tienes.",
                            Image = "martillo.jpg",
                            Name = "Martillo Doble Golpe",
                            Price = 7360f
                        },
                        new
                        {
                            Id = new Guid("65c0c4e3-7163-4cad-aa44-07f0919e8c81"),
                            CategoryId = 5,
                            Description = "Ideal para construir aeroplanos",
                            Image = "inalambrico.jpg",
                            Name = "Cable inalambrico",
                            Price = 6000f
                        },
                        new
                        {
                            Id = new Guid("c166f54c-a783-4e46-9d5b-fee493c7d559"),
                            CategoryId = 5,
                            Description = "En el pais no existe",
                            Image = "cadenai.jpg",
                            Name = "Cadena perpetua",
                            Price = 9000f
                        },
                        new
                        {
                            Id = new Guid("4539008b-1cc4-4181-b056-49135666d1c7"),
                            CategoryId = 6,
                            Description = "Magnificado a escala con lujo de detalles. Para estudiar lo que no puedes ver.",
                            Image = "p.webp",
                            Name = "Miembro a Escala",
                            Price = 7360f
                        },
                        new
                        {
                            Id = new Guid("c349bc28-a82c-4998-b05c-d778bdd84fc1"),
                            CategoryId = 6,
                            Description = "Regalalo",
                            Image = "cosplay.webp",
                            Name = "Cosplay de enfermera",
                            Price = 4990f
                        },
                        new
                        {
                            Id = new Guid("fc5e4d21-8857-4b51-8ee6-cc1ff8271c59"),
                            CategoryId = 6,
                            Description = "Ropa de mal gusto",
                            Image = "ropa.jpg",
                            Name = "Ropa de mal gusto",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.Property<string>("TransbankSession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Cart", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.FerraUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.Product", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ferramas.Model.Domain.PurchaseAttempt", b =>
                {
                    b.HasOne("Ferramas.Model.Domain.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
